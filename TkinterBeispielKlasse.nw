<h1>Tkinter - eine Beispielsklasse</h1>
<p>Die Beispielklasse zeigt, wie ein Tkinter-Dialog erzeugt und mit typischen Elementen gef&uuml;llt wird.</p>
<tableofcontents></tableofcontents> 

<h2>Shebang, Copyright etc.:</h2>

<<Kopf>>=
#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
#       dialogmaker.py
#       
#       Copyright 2013 Michael Stehmann <info@rechtsanwalt-stehmann.de>
#       
#       This program is free software; you can redistribute it and/or modify
#       it under the terms of the GNU General Public License as published by
#       the Free Software Foundation; either version 3 of the License, or
#       (at your option) any later version.
#       
#       This program is distributed in the hope that it will be useful,
#       but WITHOUT ANY WARRANTY; without even the implied warranty of
#       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#       GNU General Public License for more details.
#       
#       You should have received a copy of the GNU General Public License
#       along with this program; if not, write to the Free Software
#       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#       MA 02110-1301, USA.

@
<h2>Importe</h2>
<p>In Debian muss folgendes Paket zus&uuml;tzlich installiert werden:</p>
<ul><li>python3-tk</li></ul>
<p>&quot;messagebox&quot;, &quot;simpledialog&quot; und &quot;filedialog&quot; m&uuml;ssen trotz des &quot;*&quot; gesondert importiert werden.</p>

<<Importe>>=
from tkinter import * 
from tkinter import messagebox
from tkinter import simpledialog
from tkinter import filedialog


@
<h2>Klasse DialogMaker:</h2>

<<Klasse>>=
class DialogMaker(object):
	"""Methoden zur Erzeugung und Gestaltung von Tkinter-Dialogen"""

@
<h2>Die einzelnen Methoden:</h2>
<h3>__init__</h3>
<p>Diese Methode ruft die Klasse Tkinter auf und setzt den Dialogtitel, der als Zeichenkette &uuml;bergeben wird (andernfalls lautet der Titel &quot;Dialog&quot;).</p>

<<__init__>>=
	def __init__(self, title="Dialog"):
		"""Erzeugt Tkinter-Dialog und setzt Dialogtitel"""
		self.dia=Tk()
		self.dia.title(title)

@
<h3>mainloop</h3>

<<mainloop>>=
	def mainloop(self):
		"""Erzeugt Dialog"""
		self.dia.mainloop()

@
<h3>Spezielle Schaltfl&auml;chen:</h3>
<h4>Schaltfl&auml;che &quot;Auswahl&quot;:</h4>
<p>Zur Platzierung der Elemente im Dialog gibt es drei Methoden: <em>pack()</em>, <em>place()</em> und <em>grid()</em>. Verwendet wird im Folgenden die Letztgenannte.</p>

<<auswahlbutton>>=
	def auswahlbutton(self, befehl, r, c):
		"""Erzeugt den Auswahlbutton"""
		auswahlbutton = Button(self.dia, text = "Auswahl", bg="yellow", command = befehl)
		auswahlbutton.grid(row=r, column=c, padx=10)

@
<h4>Schaltfl&auml;che &quot;&Auml;ndern&quot;:</h4>

<<aendernbutton>>=
	def aendernbutton(self, befehl, r, c):
		"""Erzeugt den Ändernbutton"""
		auswahlbutton = Button(self.dia, text = "Ändern", bg="yellow", command = befehl)
		auswahlbutton.grid(row=r, column=c, padx=10)

@
<h4>Schaltfl&auml;che &quot;Eingabe&quot;:</h4>

<<eingabebutton>>=
	def eingabebutton(self, befehl, r, c):
		"""Erzeugt den Eingabebutton"""
		eingabebutton = Button(self.dia, text = "Eingabe", bg="yellow", command = befehl)
		eingabebutton.grid(row=r, column=c, padx=10)

@
<h4>Schaltfl&auml;che &quot;Ende&quot;:</h4>

<<endebutton>>=
	def endebutton(self, r, c):
		"""Erzeugt den Button zum Beenden"""
		eb = Button(self.dia, text = "Ende", fg="red", command = self.ende)
		eb.grid(row=r, column=c)

@
<p>Diese Methode beendet den Dialog. Sie wird beim Klicken auf die Schaltfl&auml;che &quot;Ende&quot; aufgerufen.</p>

<<ende>>=
	def ende(self):
		"""Beendet den Dialog"""
		self.dia.destroy()

@
<h3>Allgemeine Elemente:</h3>
<h4>Anzeigefeld:</h4>
<p>Zeigt Zeichenketten an.</p>

<<tklabel>>=
	# Allgemeine Elemente

	def label(self, ausgabetext, w, r, c, bgc, cs=1):
		"""Erzeugt ein Anzeigefeld"""
		lb = Label(self.dia, text = ausgabetext, width=w, bg=bgc)
		lb.grid(row=r, column=c, columnspan=cs)

@
<h4>Eingabefeld:</h4>
<p>Dient zur Eingabe von Zeichenketten.</p>

<<entry>>=
	def eingabeFeld(self, w, r, c, cs=1):
		"""Erzeugt ein Eingabefeld"""
		e = Entry(self.dia, width=w)
		e.grid(row=r, column=c, columnspan=cs)
		return e

@
<h4>Eingabefeld f&uuml;r Passphrasen:</h4>
<p>Verschleiert die Eingabe.</p>

<<entrypw>>=
	def eingabeFeldPasswd(self, w, r, c, cs=1):
		"""Erzeugt ein Eingabefeld mit * als Darstellung"""
		e = Entry(self.dia, width=w, show="*")
		e.grid(row=r, column=c, columnspan=cs)
		return e

@
<h4>Listenfeld:</h4>
<p>gibt eine Auswahlliste aus.</p>

<<listbox>>=
	def listbox(self, liste, w, r, c):
		"""Erzeugt ein Listenfeld"""

		self.listbox = Listbox(self.dia, width=w)
		for i in range(0,len(liste)):
			self.listbox.insert("end", "  "+liste[i])
		self.listbox.grid(row=r, column=c, padx=5)
		return self.listbox

@
<p>Methode zur Ermittlung des ausgew&auml;hlten Listeneintrages.</p>

<<auswahl>>=
	def auswahl(self, listbox):
		"""Stellt die im Listenfeld des Dialoges gewaehlte Auswahl fest"""
		auswahl=listbox.get("active").strip()
		return auswahl

@
<p>Es gibt einerseits weitere interessante Elemente (z.B. Menüs und Toolbars, Canvas) und andererseits haben die vorgestellten Elemente eventuell weitere Konfigurationsm&ouml;glichkeiten.</p>
<p>Auch werden <em>Events</em> und <em>Bindings</em> hier nicht behandelt.</p>

<h3>Vorgefertigtes:</h3>
<h4>Dateiauswahldialog:</h4>

<<dateiauswahl>>=
	# Vorgefertigtes

	def fileOpenDialog(self, diatitle="Dateiauswahldialog"):
		filename = filedialog.askopenfilename(filetypes = [('all files','*.*')],title = diatitle)
		return(filename)

@
<h4>Fragedialog:</h4>
<p>Vorgestellt wird ein Dialog, der eine Zeichnekette abfragt. Außerdem gibt es noch <em>askinteger</em> und <em>askfloat</em>, die Zahlen abfragen, wobei ein zul&auml;ssiger Wertebreich durch Angabe von Minimum (<em>minvalue</em>) und Maximum (<em>maxvalue</em>) vorgegeben werden k&ouml;nnen soll.</p>

<<questiondialog>>=
	def questiondialog(self, diatitle, question, istring=""):
		answer = simpledialog.askstring(diatitle, question, initialvalue=istring)
		return answer

@
<h4>Messageboxen:</h4>
<p>Es gibt insgesamt zwei Gruppen n&auml;mlich Nachrichten- und Fragenboxen, wobei bei erster auch mehrere Auswahlm&ouml;glichkeiten konfiguriert werden k&ouml;nnen.</p>
<h5>Nachrichtenboxen:</h5>
<p>Es gibt drei Arten, n&auml;mlich <em>showinfo</em>, <em>showwarning</em> und <em>showerror</em>.</p>
<p>Jede von ihnen kann auf <b>6</b> verschiedene Arten mit Buttons versehen werden. R&uuml;ckgabewert ist ein String.</p>

<<mboxen>>=
	def minfo(self, mbtitle, mbtext, btype="ok"):
		sb = messagebox.showinfo(mbtitle, mbtext, type=btype)
		return sb

	def mwarning(self, mbtitle, mbtext, btype="ok"):
		sb = messagebox.showwarning(mbtitle, mbtext, type=btype)
		return sb

	def merror(self, mbtitle, mbtext, btype="ok"):
		sb = messagebox.showerror(mbtitle, mbtext, type=btype)
		return sb

@
<h5>Fragenboxen:</h5>
<p>Hier gibt es wieder drei Arten: <em>askyesno</em>, <em>askokcancel</em> und <em>askretrycancel</em>. Jede von ihnen kann mit 4 verschiedenen Icons &quot;verziert&quot; werden. Der R&uuml;ckgabewert ist TRUE oder FALSE.</p>

<<qboxen>>=
	def yesorno(self, qbtitle, qbtext, qbicon="question"):
		a=messagebox.askyesno(qbtitle, qbtext, icon=qbicon)
		return a

	def okorcancel(self, qbtitle, qbtext, qbicon="question"):
		a=messagebox.askokcancel(qbtitle, qbtext, icon=qbicon)
		return a

	def retryorcancel(self, qbtitle, qbtext, qbicon="question"):
		a=messagebox.askretrycancel(qbtitle, qbtext, icon=qbicon)
		return a

@
<p>Au&szlig;erdem gibt es noch einen <em>colorchooser</em> (<em>askcolor()</em>). Diese Funktion gibt ein Zweiertupel mit einem RGB-Tripel und einen Tk-Color-String zur&uuml;ck. Der Vorgabewert (<em>initialcolor</em>) kann ebenfalls eines der beiden Formate haben.</p>

<h2>Funktion main</h2>
<p>Erzeugt ein Beispiel.</p>

<<main>>=
def main():

	"""Erzeugt einen Dialog mit einem Listenfeld und zwei Buttons"""
	global md, lb

	md=DialogMaker("Beispieldialog")

	liste=["Dateiauswahl", "Passworteingabe", "Fragedialog"]

	lb = md.listbox(liste, 30, 0, 0)

	md.auswahlbutton(auswahlListenfeld, 0, 1)
	md.endebutton(1, 1)
	md.mainloop()

def auswahlListenfeld():
	auswahl = md.auswahl(lb)

	if auswahl == "Dateiauswahl":
		dateiname = md.fileOpenDialog()
		antwort1=md.minfo("Datei", dateiname)
		md.minfo("Rückgabe:", antwort1)
	elif auswahl == "Passworteingabe":
		pwdia()
	else:
		antwort2 = md.questiondialog("Eingabe", "Bitte Zeichenkette eingeben:")
		if antwort2:
			antwort3 = md.yesorno("Richtig?", antwort2)
			if antwort3 == 1:
				md.minfo("Rückgabe:", antwort3)

def pwdia():
	"""Dialog zur Eingabe des Passwortes"""
	global passd, passwort
	passd=DialogMaker("Passworteingabe")
	passd.label("Passwort", 30, 0, 0, "yellow", 2)
	passwort=passd.eingabeFeldPasswd(40, 1, 0, 2)

	passd.eingabebutton(passwdTest, 2, 1)
	passd.endebutton(2, 0)

	passd.mainloop()

def passwdTest():

	_passwort = passwort.get()

	if _passwort == "":
		messagebox.showerror('Achtung!', "Passwort muss eingegeben werden")
	else:
		antwort4=passd.retryorcancel("Richtig?", _passwort)

		if antwort4 == "retry":
			passd.ende()
			pwdia()
		else:
			passd.ende()

<<ifmain>>=
if __name__ == '__main__':
	main()

@
<h1>Anhang</h1>

<h2>Python-Programm:</h2>

<<dialogmaker.py>>=
<<Kopf>>
<<Importe>>

<<Klasse>>
<<__init__>>
<<mainloop>>
<<auswahlbutton>>
<<aendernbutton>>
<<eingabebutton>>
<<endebutton>>
<<ende>>
<<tklabel>>
<<entry>>
<<entrypw>>
<<listbox>>
<<auswahl>>
<<dateiauswahl>>
<<questiondialog>>
<<mboxen>>
<<qboxen>>

<<main>>
<<ifmain>>

@
<h2>Werkzeuge zum Extrahieren:</h2>

<h3>Shellskript zum Extrahieren:</h3>

<p>Zuerst wird die HTML-Datei extrahiert; dann das Python-Programm. Dieses wird dann ausführbar gemacht.</p>

<<extra.sh>>=
#!/bin/bash

noweave -index -html TkinterBeispielKlasse.nw | htmltoc > TkinterBeispielKlasse.html
notangle -t4 -Rdialogmaker.py TkinterBeispielKlasse.nw > DialogMaker.py &&

chmod +x DialogMaker.py

@
<h3>Befehlzeilen zum Extrahieren des Shellskriptes:</h3>

<<cl>>=
notangle -Rextra.sh TkinterBeispielKlasse.nw > extra.sh && chmod +x extra.sh

@
<p><small>Copyright: Dr. Michael Stehmann Lizenz f&uuml;r Text <a href="http://creativecommons.org/licenses/by-sa/3.0/de/">CC BY-SA 3.0 DE</a></small></p>
